apply plugin: 'war'
apply plugin: 'eclipse'
//apply plugin: 'sonar'
apply plugin: 'maven'

apply from: 'checkVersions.gradle'
//import org.apache.tools.ant.filters.ReplaceTokens
//
//String buildType = hasProperty('buildType') ? buildType : 'dev'
String deploymentDir = '/home/victor/_DATA_/jboss-as-7.1.1.Final/standalone/deployments'
// String deploymentDir = '/usr/local/jboss7/standalone/deployments'
//String debug = (buildType == 'prod' ? 'false' : 'true')
//String hostName = hasProperty('hostName') ? hostName : 'HOST_NAME'
//String branch = hasProperty('branch') ? branch : 'BRANCH_NAME'
//String majorVersion = hasProperty('majorVersion') ? majorVersion : 'MAJOR_VERSION'
//String minorVersion = hasProperty('minorVersion') ? minorVersion : 'MINOR_VERSION'
//String buildNumber = hasProperty('buildNumber') ? buildNumber : 'BUILD_NUMBER'
//String versionNumber = "[" + buildType + ":" + branch + "]-" + majorVersion + "." + minorVersion + "." + buildNumber
//String debugBuild = hasProperty('debugBuild') ? debugBuild : 'true'

String seamVersion = '2.3.1.Final'
//String richFacesVersion = '4.3.0.Final'
//String primeFacesVersion = '3.4.2'
//String droolsVersion = '5.3.3.Final'
//String luceneVersion = '3.6.2'
//String hibernateVersion = '4.1.6.Final'
//String hibernateSearchVersion = '4.2.0.Final'
//String hibernateValidatorVersion = '4.2.0.Final'

eclipse.classpath.defaultOutputDir = file('build/eclipseClasses')

configurations {
    testJavaAgent
}

war {
    archiveName 'GitProject.war'
    webInf {
        from 'src/main/config/WEB-INF/components.xml', 'src/main/config/WEB-INF/web.xml'
        //filter(ReplaceTokens, tokens: [debug: debugBuild])
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.3'
}


/////// Seam-specific War files

//Copy the persistence file for this build type into the resources directory
//task copyPersistence(type: Copy) {
//    from ('src/main/config/META-INF/') {
//        //include 'persistence-' + buildType + '.xml'
//        //rename 'persistence-.*.xml', 'persistence.xml'
//    }
//    into processResources.destinationDir.toString() + '/META-INF/'
//}


//Copy the components file into the resources directory
task copyComponentsXML(type: Copy) {
    //println "Updating configuration files - debug = " + debugBuild

    from ('src/main/config/') {
        include 'components.properties'
    }
    //expand(debug: debugBuild)
    into processResources.destinationDir.toString()
}


//Copy the components file into the resources directory
task updateConfigurationXML(type: Copy) {
    //println "Updating configuration files - debug = " + debugBuild
    println "Moving files to " + processResources.destinationDir.toString()

    from ('src/main/webapp/WEB-INF') {
        include 'web.xml', 'components.xml'
    }
    //expand(debug: debugBuild)
    into "build/output/WEB-INF"
}

// fill in parameters based on build type
task updateProperties (type: Copy) {
//    println "Updating properties files - HOSTNAME = " + hostName
//    println "Updating properties files - VERSION_NUMBER = " + versionNumber
//    println "Updating properties files - BRANCH_NAME = " + branch
//    println "Updating properties files - MAJOR_VERSION = " + majorVersion
//    println "Updating properties files - MINOR_VERSION = " + minorVersion
//    println "Updating properties files - BUILD_NUMBER = " + buildNumber

    from ('src/main/resources/') {
        include 'application_en.properties'
    }
    //expand(HOSTNAME: hostName, VERSION_NUMBER: versionNumber, BRANCH_NAME: branch, MAJOR_VERSION: majorVersion, MINOR_VERSION: minorVersion, BUILD_NUMBER: buildNumber)
    into processResources.destinationDir.toString()
}


war.dependsOn copyComponentsXML
//war.dependsOn copyPersistence
war.dependsOn updateProperties
//war.dependsOn updateConfigurationXML

///////// Explode (deploy locally as an exploded archive)

boolean javaDeployed = false

//Copy the files from the war out into an exploded directory
task explode(type: Copy, dependsOn: 'war')  {
    into buildDir.name + '/exploded'
    with war
}

task deployExploded(dependsOn: ['copyExplodedOther', 'copyExplodedJava']) {
    ext.deployFile = new File(deploymentDir + '/GitProject.war.dodeploy')
    ext.deployedFile = new File(deploymentDir + '/GitProject.war.deployed')
    //outputs.file deployFile
}
deployExploded << {
    if (javaDeployed) {
        deployFile.createNewFile()
        println "Created deployment marker file, Java classes updated."
    }
    else if (!deployedFile.exists()) {
        deployFile.createNewFile()
        println "Created deployment marker file, not yet deployed."
    }
}

//Don't copy Java files if they haven't changed
task copyExplodedJava(type: Copy, dependsOn: 'explode') {
    from explode
    into deploymentDir + "/GitProject.war"
    include "**/*.class"
    include "**/*.jar"
}
copyExplodedJava << {
    javaDeployed = true
}

task copyExplodedOther(type: Copy, dependsOn: 'explode') {
    from explode
    into deploymentDir + "/GitProject.war"
    exclude "**/*.class"
    exclude "**/*.jar"
}


////////// Deploy (locally, but as a .war)

task deploy(type: Copy, dependsOn: 'war') {
    from war
    into deploymentDir
}

//For AS7, notify the deployment scanner
task reDeploy {
    File deployFile = new File(deploymentDir + '/GitProject.war.dodeploy')
    outputs.file deployFile
}
reDeploy << {
    //this should only redeploy if the classes have changed, not the view files
    deployFile.createNewFile()
    println "Created deployment marker file"
}

task undeploy (type: Delete) {
    delete deploymentDir + "/GitProject.war.deployed"
    delete deploymentDir + "/GitProject.war"
}


//////////////// TESTS

task pom << {
    pom{}.writeTo("${buildDir}/GitProject.pom")
}

test {
    useTestNG() {
        excludeGroups 'warp'
    }
}

task integrationTest(type: Test, dependsOn: [pom, testClasses]) {
    useTestNG() {
        includeGroups 'warp', 'arquillian'
    }
}

tasks.withType(Test) {
    testReport = true
}

check.dependsOn integrationTest
clean.dependsOn undeploy
test.dependsOn undeploy
tasks.eclipse.dependsOn pom
test.dependsOn pom

clean {
    delete "target"
    delete "classes"
    delete "exploded-archives"
    delete "dist"
    delete "test-build"
    delete "test-output"
}

//Dependencies

repositories {
    maven {
        url "http://repository.jboss.org/nexus/content/groups/public-jboss/"
    }
//    maven {
//        url "http://repository.primefaces.org/"
//    }
    mavenCentral()
    mavenLocal()
}

dependencies {

    //Seam
    compile 'org.jboss.seam:jboss-seam:'+seamVersion
    compile 'org.jboss.seam:jboss-seam-ui:'+seamVersion
//    compile 'org.jboss.seam:jboss-seam-pdf:'+seamVersion
//    compile 'org.jboss.seam:jboss-seam-excel:'+seamVersion
//    compile 'org.jboss.seam:jboss-seam-mail:'+seamVersion
    compile 'org.jboss.seam:jboss-seam-debug:'+seamVersion

//    //Richfaces
//    compile 'org.richfaces.ui:richfaces-components-ui:'+richFacesVersion
//    compile 'org.richfaces.core:richfaces-core-impl:'+richFacesVersion
//    compile 'org.richfaces.sandbox.ui.schedule:schedule-ui:'+'4.3.0-SNAPSHOT'//+richFacesVersion
//
//    //Primefaces
//    compile 'org.primefaces:primefaces:'+primeFacesVersion
//
//    //Hibernate
//    compile 'org.hibernate:hibernate-core:'+hibernateVersion
//    compile 'org.hibernate:hibernate-entitymanager:'+hibernateVersion
//    compile 'org.hibernate:hibernate-search:'+hibernateSearchVersion
//    compile 'org.hibernate:hibernate-validator:'+hibernateValidatorVersion
//    compile 'javax.validation:validation-api:1.0.0.GA'
//
//    //Lucene
//    compile 'org.apache.lucene:lucene-core:'+luceneVersion
//    compile 'org.apache.lucene:lucene-queries:'+luceneVersion
//    compile 'org.apache.lucene:lucene-highlighter:'+luceneVersion

    //JSF	- refer to jboss-as-parent.pom
    //compile 'org.jboss.spec.javax.faces:jboss-jsf-api_2.0_spec:1.0.0.Final'
    providedCompile 'org.jboss.spec.javax.faces:jboss-jsf-api_2.1_spec:2.0.4.Final'
    compile 'org.jboss.spec.javax.servlet:jboss-servlet-api_3.0_spec:1.0.1.Final'
    compile 'org.jboss.spec.javax.ejb:jboss-ejb-api_3.1_spec:1.0.2.Final'
    compile 'com.sun.faces:jsf-impl:2.1.11-jbossorg-3'

//    //Drools	- from where?
//    runtime 'org.drools:drools-api:5.1.1'
//    runtime 'org.drools:drools-compiler:'+droolsVersion
//    runtime 'org.drools:drools-core:'+droolsVersion
//
//    //Misc
//    compile 'jfree:jfreechart:1.0.13'
//    compile 'org.apache.pdfbox:pdfbox:1.7.1'
//    compile 'org.mnode.ical4j:ical4j:1.0.4'
    compile 'commons-collections:commons-collections:3.2.1'
//    compile 'javax.mail:mail:1.4.7'
    compile 'javax.activation:activation:1.1.1'
    runtime 'org.antlr:antlr-runtime:3.1.3'
    runtime 'org.mvel:mvel2:2.0.16'
//
//    //for instrumentation
//    providedCompile 'org.slf4j:slf4j-log4j12:1.6.4'
//
    providedRuntime 'javax.el:el-api:1.0'
    providedRuntime 'antlr:antlr:2.7.7'
//
//    //testing
//    testCompile 'org.testng:testng:6.8'
//    testCompile 'org.slf4j:slf4j-log4j12:1.6.4'
//    testCompile 'org.easytesting:fest-assert-core:2.0M8'
//    testCompile 'org.jboss.as:jboss-as-arquillian-container-managed:7.1.3.Final'
//    testCompile 'org.jboss.arquillian.testng:arquillian-testng-container:1.0.3.Final'
//    testCompile 'org.jboss.arquillian.protocol:arquillian-protocol-servlet:1.0.3.Final'
//    testCompile 'org.jboss.arquillian.extension:arquillian-seam2:1.0.0.Alpha2'
//    testCompile 'org.jacoco:org.jacoco.core:0.6.0.201210061924'
//    testCompile ('org.jboss.arquillian.extension:arquillian-persistence-impl:1.0.0.Alpha5')
//            { exclude module: "slf4j-jdk14" }
//
//    testRuntime 'org.jboss.arquillian.extension:arquillian-jacoco:1.0.0.Alpha5'
//    testCompile 'org.jboss.arquillian.extension:arquillian-warp-jsf:1.0.0.Alpha2'
//    testCompile 'org.jboss.arquillian.graphene:arquillian-graphene:2.0.0.Alpha3'
//
//    testJavaAgent 'org.jacoco:org.jacoco.agent:0.6.0.201210061924:runtime'
}

test {
    jvmArgs "-javaagent:" + configurations.testJavaAgent.asPath + "=destfile=" + reporting.baseDir + "/coverage/jacoco.exec,excludes=com.steadystate.css.parser.*"
}

//http://issues.gradle.org/browse/GRADLE-2592
plugins.withType(EclipsePlugin) {
    eclipse.classpath.file.whenMerged { classpath ->
        classpath.entries.removeAll { it.path.endsWith('pom') }
    }
}