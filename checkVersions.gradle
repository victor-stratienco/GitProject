// Find any 3rd party libraries which have released new versions
// to the central Maven repo since we last upgraded.
task checkLibVersions << {
	def checked = [:]
	def bannedVersions = ['alpha', 'beta', 'rc', 'cr', '-m', '.m', 'SNAPSHOT']
	allprojects {
		configurations.each { configuration ->
			configuration.allDependencies.each { dependency ->
				def currentVersion = dependency.version
				def currettVersionSplit = currentVersion.split('.')
				if(!checked[dependency]) {
					def group = dependency.group
					def path = group.replace('.', '/')
					def name = dependency.name
					def url = "http://repo1.maven.org/maven2/$path/$name/maven-metadata.xml"
					try {
						def metadata = new XmlSlurper().parseText(url.toURL().text)
						def versions = metadata.versioning.versions.version.collect { it.text() }
						def newest = versionsMax(versions)
						if(currentVersion != newest) {
							println "$group:$name $currentVersion -> $newest"
						}
					} catch(FileNotFoundException e) {
						logger.info "Unable to download $url: $e.message"
					} catch(org.xml.sax.SAXParseException e) {
						logger.debug "Unable to parse $url: $e.message"
					}
					checked[dependency] = true
				}
			}
		}
	}
}

def versionsMax(versions) {
	def max = versions[0]
	versions.each { String version ->
		if (compareVersions(version.split("\\.|-"), max.split("\\.|-")) > 0) {
			max = version
		}
	}
	return max
}

def compareVersions(String[] version1, String[] version2) {
	for (def i = 0; i < Math.min(version1.size(), version2.size()); i++) {
		def v1 = version1[i]
		def v2 = version2[i]
		
		if (v1.isInteger() && v2.isInteger()) {
			v1 = v1.asType(Integer)
			v2 = v2.asType(Integer)
		}
		
		if (v1 > v2) {
			return 1
		}
		if (v1 < v2) {
			return -1
		}
	}
	if (version1.size() > version2.size()) {
		return 1
	}
	else if (version2.size() > version1.size()) {
		return -1
	}
	return 0
}